version: 2.1
orbs:
  node: circleci/node@5.0.1
  docker: circleci/docker@2.1.4
  heroku: circleci/heroku@2.0.0
  snyk: snyk/snyk@1.5.0
jobs:
  build:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo Installing dependencies...”
          npm install
  test:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: |
          echo “Running tests...”
          npm run test
  scan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: DOCKERHUB_LOGIN/education-space
    steps:
      - checkout
      - setup_remote_docker
      - docker/check:
          docker-username: DOCKERHUB_LOGIN
          docker-password: DOCKERHUB_PASSWORD
      - run: docker build -t $IMAGE_NAME .
      # - docker/build:
      #     image: $DOCKER_USERNAME/education-space
      - snyk/scan:
          docker-image-name: $IMAGE_NAME
          # The "fail-on-issues: false" option makes the scan report issues but always exit with code 0
          # This allows the pipeline to continue even if vulnerabilities are found
          fail-on-issues: true
          severity-threshold: "high"
  codescan:
    docker:
      - image: cimg/node:16.10
    environment:
      IMAGE_NAME: $DOCKER_USERNAME/education-space
    steps:
      - checkout
      # - setup_remote_docker
      # - docker/check
      # - run: docker build -t $IMAGE_NAME .
      - node/install-packages:
          pkg-manager: npm
      - snyk/install
      - run: |
          snyk code test
  publish:
    executor: docker/docker
    steps:
      - setup_remote_docker
      - checkout
      - docker/check:
          docker-username: DOCKERHUB_LOGIN # DOCKER_LOGIN is the default value, if it exists, it automatically would be used.
          docker-password: DOCKERHUB_PASSWORD # DOCKER_PASSWORD is the default value
      - docker/build:
          image: $DOCKER_USERNAME/education-space
      - docker/push:
          image: $DOCKER_USERNAME/education-space
  deploy:
    docker:
      - image: cimg/node:16.10
    steps:
      - setup_remote_docker
      - heroku/install
      - checkout
      - run:
          name: Heroku Container Push
          command: |
            heroku container:login
            heroku stack:set container -a $HEROKU_APP_NAME
            heroku container:push web -a $HEROKU_APP_NAME
            heroku container:release web -a $HEROKU_APP_NAME
# Run only the build and test jobs when main branch is updated.
# Run all the jobs (including publish and deploy jobs) when release branch is updated
workflows:
  simple_workflow:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main
                - release/v1.0.0
      - test:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - release/v1.0.0
      - scan:
          requires:
            - build
          filters:
            branches:
              only: main
      - codescan:
          requires:
            - build
          filters:
            branches:
              only: main
      - publish:
          requires:
            - test
          filters:
            branches:
              only: release/v1.0.0
      - deploy:
          requires:
            - publish
          filters:
            branches:
              only: release/v1.0.0
